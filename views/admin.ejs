<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - Cricket Auction</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    
    <style>
        .admin-card {
            margin-bottom: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .player-card {
            cursor: pointer;
            transition: transform 0.3s;
        }
        .player-card:hover {
            transform: translateY(-5px);
        }
        .auction-control {
            background-color: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
        }
        .status-running {
            color: #28a745;
            font-weight: bold;
        }
        .status-paused {
            color: #ffc107;
            font-weight: bold;
        }
        .status-not-started, .status-ended {
            color: #dc3545;
            font-weight: bold;
        }
        .player-status {
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            font-size: 0.875rem;
            font-weight: 500;
        }
        .status-available {
            background-color: #d1e7dd;
            color: #0f5132;
        }
        .status-sold {
            background-color: #cff4fc;
            color: #055160;
        }
        .status-unsold {
            background-color: #f8d7da;
            color: #842029;
        }
    </style>
</head>
<body>
    <div class="container py-4">
        <h1 class="mb-4">Admin Dashboard</h1>
        
        <!-- Auction Control Panel -->
        <div class="auction-control admin-card">
            <h3>Auction Control Panel</h3>
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-body">
                            <h5>Current Status: <span id="auction-status" class="status-not-started">Not Started</span></h5>
                            <div id="current-player-info" class="d-none">
                                <h5>Current Player: <span id="current-player-name"></span></h5>
                                <p>Role: <span id="current-player-role"></span></p>
                                <p>Base Price: ₹<span id="current-player-base-price"></span></p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="d-flex flex-column">
                        <div class="btn-group mb-2">
                            <button id="pause-auction" class="btn btn-warning" disabled>Pause Auction</button>
                            <button id="end-auction" class="btn btn-danger" disabled>End Auction</button>
                        </div>
                        <div class="btn-group">
                            <button id="mark-sold" class="btn btn-success" disabled>Mark as Sold</button>
                            <button id="mark-unsold" class="btn btn-danger" disabled>Mark as Unsold</button>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="row mb-3">
                <div class="col-12">
                    <h5>Current Bids</h5>
                    <div class="table-responsive">
                        <table class="table table-striped" id="bids-table">
                            <thead>
                                <tr>
                                    <th>Team</th>
                                    <th>Amount (₹)</th>
                                    <th>Time</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Bids will be displayed here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Unsold Players Section -->
        <div class="admin-card p-3">
            <h3>Unsold Players</h3>
            <div class="row" id="unsold-players">
                <!-- Unsold players will be displayed here -->
            </div>
        </div>
        
        <!-- Recent Sales Section -->
        <div class="admin-card p-3">
            <h3>Recent Sales</h3>
            <div class="table-responsive">
                <table class="table table-striped" id="recent-sales-table">
                    <thead>
                        <tr>
                            <th>Player</th>
                            <th>Role</th>
                            <th>Team</th>
                            <th>Amount (₹)</th>
                        </tr>
                    </thead>
                    <tbody>
                        
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Load initial data
            loadAuctionStatus();
            loadUnsoldPlayers();
            loadRecentSales();
            
            // Setup refresh intervals
            setInterval(loadAuctionStatus, 5000); // Refresh auction status every 5 seconds
            setInterval(loadRecentSales, 10000); // Refresh recent sales every 10 seconds
            
            // Event handlers for auction control buttons
            document.getElementById('pause-auction').addEventListener('click', pauseAuction);
            document.getElementById('end-auction').addEventListener('click', endAuction);
            document.getElementById('mark-sold').addEventListener('click', finalizeSale);
            document.getElementById('mark-unsold').addEventListener('click', markUnsold);
        });
        
        // Load auction status
        function loadAuctionStatus() {
            fetch('/api/auction/status')
                .then(response => response.json())
                .then(data => {
                    const statusElem = document.getElementById('auction-status');
                    statusElem.textContent = formatStatus(data.status);
                    statusElem.className = `status-${data.status.replace('_', '-')}`;
                    
                    const pauseBtn = document.getElementById('pause-auction');
                    const endBtn = document.getElementById('end-auction');
                    const soldBtn = document.getElementById('mark-sold');
                    const unsoldBtn = document.getElementById('mark-unsold');
                    
                    // Enable/disable buttons based on auction status
                    if (data.status === 'running') {
                        pauseBtn.removeAttribute('disabled');
                        endBtn.removeAttribute('disabled');
                        soldBtn.removeAttribute('disabled');
                        unsoldBtn.removeAttribute('disabled');
                    } else {
                        pauseBtn.setAttribute('disabled', 'disabled');
                        endBtn.setAttribute('disabled', 'disabled');
                        soldBtn.setAttribute('disabled', 'disabled');
                        unsoldBtn.setAttribute('disabled', 'disabled');
                    }
                    
                    // Display current player info if available
                    const playerInfoElem = document.getElementById('current-player-info');
                    if (data.current_player_id) {
                        playerInfoElem.classList.remove('d-none');
                        document.getElementById('current-player-name').textContent = data.current_player_name;
                        document.getElementById('current-player-role').textContent = data.current_player_role;
                        document.getElementById('current-player-base-price').textContent = formatPrice(data.current_player_base_price);
                        
                        // Load bids for current player
                        loadBids(data.current_player_id);
                    } else {
                        playerInfoElem.classList.add('d-none');
                        document.getElementById('bids-table').querySelector('tbody').innerHTML = '';
                    }
                })
                .catch(error => console.error('Error loading auction status:', error));
        }
        
        // Load bids for current player
        function loadBids(playerId) {
            fetch(`/api/auction/bids/${playerId}`)
                .then(response => response.json())
                .then(data => {
                    const tableBody = document.getElementById('bids-table').querySelector('tbody');
                    tableBody.innerHTML = '';
                    
                    if (data.bids && data.bids.length > 0) {
                        data.bids.forEach(bid => {
                            const row = document.createElement('tr');
                            row.innerHTML = `
                                <td><i class="fas fa-users me-1"></i>${bid.team_name}</td>
                                <td><i class="fas fa-rupee-sign me-1"></i>${formatPrice(bid.amount)}</td>
                                <td><i class="fas fa-clock me-1"></i>${formatDateTime(bid.timestamp)}</td>
                            `;
                            tableBody.appendChild(row);
                        });
                    } else {
                        const row = document.createElement('tr');
                        row.innerHTML = '<td colspan="3" class="text-center"><i class="fas fa-info-circle me-1"></i>No bids yet</td>';
                        tableBody.appendChild(row);
                    }
                })
                .catch(error => console.error('Error loading bids:', error));
        }
        
        // Load unsold players
        function loadUnsoldPlayers() {
            fetch('/api/players?status=unsold')
                .then(response => response.json())
                .then(data => {
                    const container = document.getElementById('unsold-players');
                    container.innerHTML = '';
                    
                    if (data.players && data.players.length > 0) {
                        data.players.forEach(player => {
                            const card = document.createElement('div');
                            card.className = 'col-md-3 mb-3';
                            card.innerHTML = `
                                <div class="card player-card">
                                    <img src="${player.image || '/images/player-placeholder.png'}" 
                                         class="card-img-top" alt="${player.name}" 
                                         style="height: 150px; object-fit: cover;">
                                    <div class="card-body">
                                        <h5 class="card-title"><i class="fas fa-user me-1"></i>${player.name}</h5>
                                        <p class="card-text"><i class="fas fa-running me-1"></i>${player.role}</p>
                                        <p class="card-text"><i class="fas fa-tag me-1"></i>Base: ₹${formatPrice(player.base_price)}</p>
                                        <p class="card-text">
                                            <span class="player-status status-${player.status}">
                                                <i class="fas fa-circle me-1"></i>${formatStatus(player.status)}
                                            </span>
                                        </p>
                                        <button class="btn btn-primary start-auction" 
                                                data-player-id="${player.id}"
                                                ${player.status !== 'available' ? 'disabled' : ''}>
                                            <i class="fas fa-play me-1"></i>Start Auction
                                        </button>
                                    </div>
                                </div>
                            `;
                            container.appendChild(card);
                        });
                        
                        // Add event listeners to start auction buttons
                        document.querySelectorAll('.start-auction').forEach(button => {
                            button.addEventListener('click', function() {
                                const playerId = this.getAttribute('data-player-id');
                                startAuction(playerId);
                            });
                        });
                    } else {
                        container.innerHTML = '<div class="col-12 text-center"><i class="fas fa-info-circle me-1"></i>No unsold players available</div>';
                    }
                })
                .catch(error => console.error('Error loading unsold players:', error));
        }
        
        // Load recent sales
        function loadRecentSales() {
            fetch('/api/auction/recent-sales')
                .then(response => response.json())
                .then(data => {
                    const tableBody = document.getElementById('recent-sales-table').querySelector('tbody');
                    tableBody.innerHTML = '';
                    
                    if (data.sales && data.sales.length > 0) {
                        data.sales.forEach(sale => {
                            const row = document.createElement('tr');
                            row.innerHTML = `
                                <td><i class="fas fa-user me-1"></i>${sale.name}</td>
                                <td><i class="fas fa-running me-1"></i>${sale.role}</td>
                                <td>
                                    <img src="${sale.team_logo || '/images/team-placeholder.png'}" 
                                         alt="${sale.team_name}" 
                                         style="height: 30px; width: 30px; object-fit: cover; margin-right: 5px;">
                                    ${sale.team_name}
                                </td>
                                <td><i class="fas fa-rupee-sign me-1"></i>${formatPrice(sale.sold_amount)}</td>
                            `;
                            tableBody.appendChild(row);
                        });
                    } else {
                        const row = document.createElement('tr');
                        row.innerHTML = '<td colspan="4" class="text-center"><i class="fas fa-info-circle me-1"></i>No recent sales</td>';
                        tableBody.appendChild(row);
                    }
                })
                .catch(error => console.error('Error loading recent sales:', error));
        }
        
        // Start auction for a player
        function startAuction(playerId) {
            fetch('/api/auction/start', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ player_id: playerId }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    loadAuctionStatus();
                    loadUnsoldPlayers();
                } else {
                    alert('Failed to start auction: ' + data.message);
                }
            })
            .catch(error => console.error('Error starting auction:', error));
        }
        
        // Pause auction
        function pauseAuction() {
            fetch('/api/auction/pause', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    loadAuctionStatus();
                } else {
                    alert('Failed to pause auction: ' + data.message);
                }
            })
            .catch(error => console.error('Error pausing auction:', error));
        }
        
        // End auction
        function endAuction() {
            fetch('/api/auction/end', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    loadAuctionStatus();
                    loadUnsoldPlayers();
                } else {
                    alert('Failed to end auction: ' + data.message);
                }
            })
            .catch(error => console.error('Error ending auction:', error));
        }
        
        // Finalize sale (mark as sold)
        function finalizeSale() {
            fetch('/api/auction/finalize-sale', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    loadAuctionStatus();
                    loadUnsoldPlayers();
                    loadRecentSales();
                } else {
                    alert('Failed to finalize sale: ' + data.message);
                }
            })
            .catch(error => console.error('Error finalizing sale:', error));
        }
        
        // Mark player as unsold
        function markUnsold() {
            fetch('/api/auction/mark-unsold', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    loadAuctionStatus();
                    loadUnsoldPlayers();
                } else {
                    alert('Failed to mark as unsold: ' + data.message);
                }
            })
            .catch(error => console.error('Error marking as unsold:', error));
        }
        
        // Helper functions
        function formatStatus(status) {
            return status.charAt(0).toUpperCase() + status.slice(1);
        }
        
        function formatPrice(price) {
            return new Intl.NumberFormat('en-IN').format(price);
        }
        
        function formatDateTime(dateString) {
            return new Date(dateString).toLocaleString('en-IN', {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        // Function to update player status in the UI
        function updatePlayerStatus(playerId, newStatus) {
            const playerCard = document.querySelector(`[data-player-id="${playerId}"]`).closest('.player-card');
            if (playerCard) {
                const statusElement = playerCard.querySelector('.player-status');
                if (statusElement) {
                    statusElement.className = `player-status status-${newStatus}`;
                    statusElement.innerHTML = `<i class="fas fa-circle me-1"></i>${formatStatus(newStatus)}`;
                }
                
                const startButton = playerCard.querySelector('.start-auction');
                if (startButton) {
                    startButton.disabled = newStatus !== 'available';
                }
            }
        }

        // Socket event handlers
        socket.on('playerUpdate', (data) => {
            updatePlayerStatus(data.player.id, data.player.status);
        });

        socket.on('auctionEnded', (data) => {
            updatePlayerStatus(data.playerId, data.status);
            loadUnsoldPlayers();
            loadRecentSales();
        });

        // Event handler for start auction button
        document.addEventListener('click', function(e) {
            if (e.target.closest('.start-auction')) {
                const playerId = e.target.closest('.start-auction').dataset.playerId;
                startAuction(playerId);
            }
        });

        async function startAuction(playerId) {
            try {
                const response = await fetch('/admin/auction/start', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ player_id: playerId })
                });

                if (!response.ok) {
                    throw new Error('Failed to start auction');
                }

                const data = await response.json();
                if (data.success) {
                    // Update UI to show auction is running
                    loadAuctionStatus();
                } else {
                    alert(data.message || 'Failed to start auction');
                }
            } catch (error) {
                console.error('Error starting auction:', error);
                alert('Failed to start auction. Please try again.');
            }
        }
    </script>
</body>
</html> 