<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
  <!-- Use local Font Awesome files for better reliability -->
  <link rel="stylesheet" href="/vendor/fontawesome/css/all.min.css">
  <link rel="stylesheet" href="/css/style.css">
  <style>
    .player-item.active {
      background-color: #e9f5ff;
      border-left: 4px solid #0d6efd;
    }
    .bid-card {
      transition: all 0.3s ease;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
      margin-bottom: 1rem;
      width: 100%;
    }
    .bid-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 6px 12px rgba(0,0,0,0.15);
    }
    .player-details-card {
      border-radius: 10px;
      overflow: hidden;
      height: 100%;
      display: flex;
      flex-direction: column;
    }
    .player-header {
      background: linear-gradient(135deg, #0d6efd, #0a58ca);
      color: white;
      padding: 15px;
    }
    .bid-history-item {
      border-left: 3px solid transparent;
      transition: all 0.2s ease;
    }
    .bid-history-item:hover {
      border-left-color: #0d6efd;
      background-color: #f8f9fa;
    }
    .auction-controls {
      position: sticky;
      top: 20px;
      display: flex;
      flex-direction: column;
      height: 100%;
      width: 100%;
    }
    /* Media query to ensure good layout on smaller screens */
    @media (max-width: 767.98px) {
      .auction-controls {
        position: static;
        margin-top: 1rem;
      }
    }
    .badge-role {
      font-size: 0.8rem;
      padding: 5px 10px;
      border-radius: 20px;
    }
    .empty-state {
      padding: 30px;
      text-align: center;
      color: #6c757d;
    }
    .empty-state i {
      font-size: 3rem;
      margin-bottom: 15px;
    }
    .timer-container {
      margin-top: 10px;
      text-align: center;
    }
    .timer {
      font-size: 1.5rem;
      font-weight: bold;
      color: #dc3545;
    }
    .timer.warning {
      color: #dc3545;
      animation: pulse 1s infinite;
    }
    @keyframes pulse {
      0% { opacity: 1; }
      50% { opacity: 0.5; }
      100% { opacity: 1; }
    }
    /* Improved layout for team view */
    .auction-layout {
      display: flex !important; /* Force flex layout even when display is toggled */
      flex-direction: row;
      gap: 1.5rem;
      position: relative;
      width: 100%;
    }
    .player-column {
      flex: 1;
      min-width: 0; /* Allow shrinking below content size */
    }
    .bid-column {
      width: 350px;
      flex-shrink: 0; /* Prevent shrinking below specified width */
    }
    /* Adjust bid history sizing */
    #bid-history {
      max-height: 300px;
      overflow-y: auto;
    }
    /* Ensure proper alignment on mobile */
    @media (max-width: 991.98px) {
      .auction-layout {
        flex-direction: column;
      }
      .bid-column {
        width: 100%;
      }
      .player-column, .bid-column {
        margin-bottom: 1.5rem;
      }
    }
    /* Fix the layout specifically for team view */
    @media (min-width: 992px) {
      .card-body#current-player {
        padding-bottom: 0;
      }
      .player-details-card {
        margin-bottom: 0;
      }
      .bid-history-container {
        flex-grow: 1;
        margin-top: 1rem;
        display: flex;
        flex-direction: column;
      }
      .bid-history-container .card-body {
        flex-grow: 1;
        overflow: hidden;
        display: flex;
        flex-direction: column;
      }
      #bid-history {
        flex-grow: 1;
        overflow-y: auto;
      }
    }
    /* Enhance bid history items */
    #bid-history .list-group-item {
      padding: 0.75rem;
      border-left: 3px solid transparent;
      transition: background-color 0.2s, border-left-color 0.2s;
    }
    #bid-history .list-group-item:hover {
      background-color: #f8f9fa;
      border-left-color: #0d6efd;
    }
    #bid-history .list-group-item.highlight {
      background-color: #e9f5ff;
      border-left-color: #0d6efd;
    }
  </style>
</head>
<body>
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container">
      <a class="navbar-brand" href="/home">
        <i class="fas fa-trophy me-2"></i>Cricket Auction
      </a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav me-auto">
          <li class="nav-item">
            <a class="nav-link active" href="/auction">
              Auction
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/teams">
              Teams
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/results">
              Results
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/projector">
              Projector View
            </a>
          </li>
        </ul>
        <ul class="navbar-nav">
          <% if (typeof team !== 'undefined') { %>
            <li class="nav-item">
              <a class="nav-link" href="/team/dashboard">
                <i class="fas fa-user me-1"></i>Welcome, <%= team.name %>
              </a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/team/logout">
                <i class="fas fa-sign-out-alt me-1"></i>Logout
              </a>
            </li>
          <% } else { %>
            <li class="nav-item">
              <a class="btn btn-primary btn-sm" href="/team/login">
                Team Login
              </a>
            </li>
          <% } %>
        </ul>
      </div>
    </div>
  </nav>

  <div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
      <h1>Cricket Auction</h1>
      <div class="auction-status">
        <span id="auction-status-badge" class="badge bg-secondary">Auction Not Running</span>
      </div>
    </div>
    
    <% if (typeof usingMockDb !== 'undefined' && usingMockDb) { %>
      <div class="alert alert-warning">
        <strong>Note:</strong> Database connection could not be established. Using mock data for demonstration.
      </div>
    <% } %>
    
    <div id="waiting-message" class="alert alert-info text-center">
      <div class="mb-3">
        <i class="fas fa-circle-notch fa-spin fa-2x mb-3"></i>
        <h4>Waiting for auction to start...</h4>
        <p>The administrator will start the auction soon. Please wait.</p>
        <!-- Dedicated container for countdown that will be shown/hidden as needed -->
        <div class="countdown-number my-3 alert alert-warning" style="display:none;">
          <strong>Next player in: <span id="countdown-seconds">0</span> seconds</strong><br>
          <small>The admin is selecting the next player...</small>
        </div>
      </div>
    </div>
    
    <div id="auction-container" class="auction-layout" style="display: none;">
      <div class="player-column">
        <div class="card mb-4 shadow-sm h-100">
          <div class="card-header bg-primary text-white">
            <h5 class="mb-0">Current Player on Auction</h5>
          </div>
          <div class="card-body" id="current-player">
            <div class="row">
              <div class="col-md-12">
                <div id="player-details">
                  <div class="card player-details-card">
                    <div class="player-header">
                      <h3 id="player-name" class="card-title mb-0">Loading player...</h3>
                      <span id="player-role-badge" class="badge badge-role bg-info mt-2"></span>
                    </div>
                    <div class="card-body">
                      <div class="row mb-3">
                        <div class="col-md-4 text-center mb-3">
                          <img id="player-image" src="/images/default-player.png" alt="Player Image" class="img-fluid rounded-circle" style="width: 120px; height: 120px; object-fit: cover; border: 3px solid #0d6efd;">
                        </div>
                        <div class="col-md-8">
                          <div class="row">
                            <div class="col-6">
                              <div class="card bg-light">
                                <div class="card-body p-2 text-center">
                                  <small class="text-muted">Base Price</small>
                                  <h5 id="player-base-price" class="mb-0">-</h5>
                                </div>
                              </div>
                            </div>
                            <div class="col-6">
                              <div class="card bg-light">
                                <div class="card-body p-2 text-center">
                                  <small class="text-muted">Role</small>
                                  <h5 id="player-role" class="mb-0">-</h5>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div class="timer-container">
                        <div class="alert alert-info">
                          <i class="fas fa-clock me-2"></i>Time remaining:
                          <span id="bid-timer" class="timer">-</span> seconds
                        </div>
                        <div class="progress">
                          <div id="time-progress" class="progress-bar progress-bar-striped progress-bar-animated bg-success" role="progressbar" style="width: 100%"></div>
                        </div>
                      </div>
                      <hr>
                      <div class="current-bid-info p-3 bg-light rounded">
                        <div class="d-flex justify-content-between align-items-center">
                          <div>
                            <h5 class="mb-1">Current Bid</h5>
                            <h3 id="current-bid" class="text-primary mb-0">No bids yet</h3>
                          </div>
                          <div class="text-end">
                            <h5 class="mb-1">Current Bidder</h5>
                            <h6 id="current-bidder" class="mb-0">None</h6>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div class="bid-column">
        <div class="auction-controls">
          <div class="card bid-card shadow-sm">
            <div class="card-header bg-success text-white">
              <h5 class="mb-0">Place Bid</h5>
            </div>
            <div class="card-body">
              <% if (typeof team !== 'undefined') { %>
                <form id="bid-form">
                  <input type="hidden" id="team-id" value="<%= team.id %>">
                  <input type="hidden" id="current-player-id" value="">
                  <div class="mb-3">
                    <div class="d-flex justify-content-between align-items-center">
                      <h5 class="mb-0"><%= team.name %></h5>
                      <div class="team-budget">
                        <span class="badge bg-primary">
                          <i class="fas fa-wallet me-1"></i>Budget:₹<%= typeof teams.budget !== 'undefined' ? teams.budget.toLocaleString() : '0' %>
                        </span>
                        <span class="badge bg-secondary ms-2">
                          <i class="fas fa-users me-1"></i>Players: <%= teams.player_count || 0 %>
                        </span>
                      </div>
                    </div>
                  </div>
                  <div class="mb-3">
                    <label for="bid-amount" class="form-label">Bid Amount</label>
                    <div class="input-group">
                      <span class="input-group-text"><i class="fas fa-rupee-sign"></i></span>
                      <input type="number" class="form-control" id="bid-amount" required>
                    </div>
                    <div class="d-flex justify-content-end mt-2">
                      <small class="text-muted">Min Bid: <span id="min-bid" class="fw-bold">N/A</span></small>
                    </div>
                  </div>
                  <div class="d-grid gap-2">
                    <button type="submit" class="btn btn-success" id="place-bid-btn" disabled>
                      <i class="fas fa-gavel me-2"></i>Place Bid
                    </button>
                  </div>
                </form>
              <% } else { %>
                <div class="alert alert-warning">
                  <i class="fas fa-exclamation-triangle me-2"></i>
                  You need to <a href="/team/login" class="alert-link">login as a team</a> to place bids.
                </div>
              <% } %>
            </div>
          </div>
          
          <div class="card bid-card shadow-sm bid-history-container">
            <div class="card-header bg-info text-white">
              <h5 class="mb-0"><i class="fas fa-history me-2"></i>Bid History</h5>
            </div>
            <div class="card-body p-0" style="min-height: 200px; overflow: hidden;">
              <ul class="list-group list-group-flush" id="bid-history">
                <li class="list-group-item text-center">No bids placed yet</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script src="/js/auction.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // DOM Elements
      const auctionStatusBadge = document.getElementById('auction-status-badge');
      const waitingMessage = document.getElementById('waiting-message');
      const auctionContainer = document.getElementById('auction-container');
      const playerName = document.getElementById('player-name');
      const playerRole = document.getElementById('player-role');
      const playerRoleBadge = document.getElementById('player-role-badge');
      const playerBasePrice = document.getElementById('player-base-price');
      const currentBid = document.getElementById('current-bid');
      const currentBidder = document.getElementById('current-bidder');
      const bidHistory = document.getElementById('bid-history');
      const bidAmount = document.getElementById('bid-amount');
      const minBid = document.getElementById('min-bid');
      const placeBidBtn = document.getElementById('place-bid-btn');
      const bidForm = document.getElementById('bid-form');
      const bidTimer = document.getElementById('bid-timer');
      const timeProgress = document.getElementById('time-progress');
      const teamId = document.getElementById('team-id');
      const currentPlayerId = document.getElementById('current-player-id');
      
      let timerInterval = null;
      let currentPlayerData = null;
      let socket;
      let bidSocket;
      
      // Initialize Socket.IO connection
      function initializeSocket() {
        // Connect to auctionSocket
        socket = io();
        
        // Connect to bidSocket namespace
        bidSocket = io('/bid', {
          auth: {
            teamId: teamId ? teamId.value : null,
            teamName: '<%= typeof team !== "undefined" ? team.name : "" %>',
            token: document.cookie.split(';').find(c => c.trim().startsWith('token='))?.split('=')[1]
          }
        });
        
        // Log connection info to help debug
        console.log('Team info for socket:', {
          teamId: teamId ? teamId.value : 'Not available',
          teamName: '<%= typeof team !== "undefined" ? team.name : "Not available" %>'
        });
        
        // Socket connection event
        socket.on('connect', () => {
          console.log('Auction Socket connected: ' + socket.id);
        });
        
        // bidSocket connection event
        bidSocket.on('connect', () => {
          console.log('Bid Socket connected: ' + bidSocket.id);
          // Enable bid button if we have a team
          if (placeBidBtn && teamId && teamId.value) {
            placeBidBtn.disabled = false;
          }
        });
        
        // Debug connection status
        bidSocket.on('connection_debug', (data) => {
          console.log('BidSocket connection debug:', data);
          // Enable bid button if authenticated
          if (placeBidBtn && data.authenticated) {
            placeBidBtn.disabled = false;
          }
        });
        
        // Socket disconnection event
        socket.on('disconnect', () => {
          console.log('Auction Socket disconnected');
        });
        
        // bidSocket disconnection event
        bidSocket.on('disconnect', () => {
          console.log('Bid Socket disconnected');
        });
        
        // Listen for auction status updates
        socket.on('auction-status', (data) => {
          try {
            console.log('Received auction status:', data);
            const { isRunning, isPaused, isWaiting, currentPlayer, message, timeRemaining } = data;
            
            // Update auction status badge
            if (auctionStatusBadge) {
              if (!isRunning) {
                auctionStatusBadge.textContent = 'Not Running';
                auctionStatusBadge.className = 'badge bg-secondary';
              } else if (isPaused) {
                auctionStatusBadge.textContent = 'Paused';
                auctionStatusBadge.className = 'badge bg-warning';
              } else if (isWaiting) {
                auctionStatusBadge.textContent = 'Waiting';
                auctionStatusBadge.className = 'badge bg-info';
              } else {
                auctionStatusBadge.textContent = 'Running';
                auctionStatusBadge.className = 'badge bg-success';
              }
            }
            
            // Update current player if provided
            if (currentPlayer) {
              // Update player details
              if (playerName) playerName.textContent = currentPlayer.name;
              if (playerRole) playerRole.textContent = currentPlayer.role;
              if (playerRoleBadge) {
                playerRoleBadge.textContent = currentPlayer.role;
                updateRoleBadgeColor(playerRoleBadge, currentPlayer.role);
              }
              if (playerBasePrice) playerBasePrice.textContent = formatCurrency(currentPlayer.basePrice);
              
              // Update current player ID
              if (currentPlayerId) currentPlayerId.value = currentPlayer.id;
              
              // Show auction container and hide waiting message
              if (waitingMessage) waitingMessage.style.display = 'none';
              if (auctionContainer) auctionContainer.style.display = 'flex';
            }
            
            // Update timer if provided
            if (timeRemaining !== undefined && bidTimer) {
              updateTimer(timeRemaining);
            }
            
            // Show status message if provided
            if (message) {
              showStatusMessage(message);
            }
          } catch (error) {
            console.error('Error handling auction status:', error);
          }
        });
        
        // Listen for new bids (on both sockets for backward compatibility)
        socket.on('new-bid', (data) => {
          console.log('Received new bid from main socket:', data);
          // Check if this bid is for the current player
          const currentId = currentPlayerId?.value;
          const bidPlayerId = data.player_id || data.playerId;
          
          if (currentId && (bidPlayerId == currentId)) { // Using loose comparison for both string and object IDs
            updateBidInfo(data);
          }
        });
        
        // Listen for new bids on bidSocket
        bidSocket.on('new-bid', (data) => {
          console.log('Received new bid from bid socket:', data);
          // Check if this bid is for the current player
          const currentId = currentPlayerId?.value;
          const bidPlayerId = data.player_id || data.playerId;
          
          if (currentId && (bidPlayerId == currentId)) { // Using loose comparison for both string and object IDs
            updateBidInfo(data);
          }
        });
        
        // Handle bidSocket errors
        bidSocket.on('bid_error', (data) => {
          alert('Bid Error: ' + data.message);
        });
        
        // Handle bidSocket success
        bidSocket.on('bid_placed', (data) => {
          // Show success toast
          const toastContainer = document.createElement('div');
          toastContainer.className = 'position-fixed bottom-0 end-0 p-3';
          toastContainer.style.zIndex = '5';
          toastContainer.innerHTML = `
            <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
              <div class="toast-header bg-success text-white">
                <strong class="me-auto">Success</strong>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
              </div>
              <div class="toast-body">
                    ${data.message || 'Bid placed successfully!'}
              </div>
            </div>
          `;
          document.body.appendChild(toastContainer);
          
          // Remove toast after 3 seconds
          setTimeout(() => {
            toastContainer.remove();
          }, 3000);
        });
        
        // Listen for player sold
        socket.on('player-sold', (data) => {
          showPlayerSoldMessage(data);
        });
        
        // Listen for player unsold
        socket.on('player-unsold', (data) => {
          showPlayerUnsoldMessage(data);
        });
        
        // Listen for auction result (handles both sold and unsold)
        socket.on('auction-result', (result) => {
          console.log('Received auction result:', result);
          if (result.result === 'sold') {
            showPlayerSoldMessage(result);
          } else if (result.result === 'unsold') {
            showPlayerUnsoldMessage(result);
          }
        });
        
        // Listen for waiting countdown
        socket.on('waiting-countdown', (data) => {
          // Use data.timeRemaining instead of data.seconds
          const seconds = data.timeRemaining || data.seconds || 0;
          showWaitingCountdown(seconds);
        });
        
        // Listen for next player
        socket.on('next-player', (player) => {
          if (player) {
            loadPlayerDetails(player.id);
          }
        });
        
        // Listen for timer updates from server
        socket.on('timer-update', (data) => {
          console.log('Received timer update:', data);
          updateTimer(data.timeRemaining);
        });
        
        // Listen for bid warning
        socket.on('bid-warning', (data) => {
          console.log('Received bid warning:', data);
          showBidWarning(data.message);
        });
        
        // Listen for auction notifications
        socket.on('auction-notification', (data) => {
          console.log('Received auction notification:', data);
          showNotification(data.title, data.message, data.type);
        });
      }
      
      // Format currency for display (Indian Rupee format)
      function formatCurrency(amount) {
        // Handle undefined/null/NaN values
        if (!amount || isNaN(amount)) {
          return "₹0";
        }
        
        // Convert to number if it's a string
        const num = typeof amount === 'string' ? parseFloat(amount) : amount;
        
        // Format with Indian numbering system (lakhs, crores)
        return new Intl.NumberFormat('en-IN', {
          style: 'currency',
          currency: 'INR',
          maximumFractionDigits: 0
        }).format(num);
      }
      
      // Show waiting countdown
      function showWaitingCountdown(seconds) {
        // Make sure seconds is a valid number
        seconds = Number(seconds) || 0;
        
        if (waitingMessage) {
          const countdownElem = waitingMessage.querySelector('.countdown-number');
          const countdownSecondsElem = document.getElementById('countdown-seconds');
          
          if (countdownElem && countdownSecondsElem) {
            // Update seconds display
            countdownSecondsElem.textContent = seconds;
            
            // Show countdown
            countdownElem.style.display = 'block';
          }
          
          // Show waiting message
          waitingMessage.style.display = 'block';
          auctionContainer.style.display = 'none';
        }
      }
      
      // Show player sold message
      function showPlayerSoldMessage(data) {
        const toastContainer = document.createElement('div');
        toastContainer.className = 'position-fixed bottom-0 start-50 translate-middle-x p-3';
        toastContainer.style.zIndex = '5';
        
        // Get player name from the data, handling different formats
        const playerName = data.player ? data.player.name : (data.playerName || 'Player');
        
        // Handle different data formats for team
        const teamName = data.team ? data.team.name : (data.teamName || 'Unknown Team');
        
        // Handle different data formats for amount
        const amount = data.amount || 0;
        
        // Get appropriate message, falling back to default if none provided
        const message = data.message || `Sold to ${teamName} for ${formatCurrency(amount)}`;
        
        toastContainer.innerHTML = `
          <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header bg-success text-white">
              <strong class="me-auto">Player Sold</strong>
              <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body text-center">
              <h5>${playerName}</h5>
              <p>${message}</p>
            </div>
          </div>
        `;
        
        document.body.appendChild(toastContainer);
        
        // Remove toast after 5 seconds
        setTimeout(() => {
          toastContainer.remove();
        }, 5000);
      }
      
      // Show player unsold message
      function showPlayerUnsoldMessage(data) {
        const toastContainer = document.createElement('div');
        toastContainer.className = 'position-fixed bottom-0 start-50 translate-middle-x p-3';
        toastContainer.style.zIndex = '5';
        
        // Get player name from the data, handling different formats
        const playerName = data.player ? data.player.name : (data.playerName || 'Player');
        
        // Get appropriate message, falling back to default if none provided
        const message = data.message || 'No bids received - marked as unsold';
        
        toastContainer.innerHTML = `
          <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header bg-secondary text-white">
              <strong class="me-auto">Player Unsold</strong>
              <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body text-center">
              <h5>${playerName}</h5>
              <p>${message}</p>
            </div>
          </div>
        `;
        
        document.body.appendChild(toastContainer);
        
        // Remove toast after 5 seconds
        setTimeout(() => {
          toastContainer.remove();
        }, 5000);
      }
      
      // Calculate bid increment based on current bid amount
      function calculateBidIncrement(currentBid) {
        // Standard bid increments based on current bid
        if (currentBid < 100000) return 10000;       // +10k for bids under 100k
        else if (currentBid < 500000) return 20000;  // +20k for bids 100k to 500k
        else if (currentBid < 1000000) return 50000; // +50k for bids 500k to 1M
        else return 100000;                         // +100k for bids over 1M
      }
      
      // Function to update bid information
      function updateBidInfo(bidData) {
        try {
          // Extract bid details
          const bidAmount = bidData.amount || bidData.bid_amount;
          const bidTeam = bidData.team_name || bidData.teamName || 'Unknown Team';
          const bidTeamId = bidData.team_id || bidData.teamId;
          
          // Update current bid and bidder
          if (currentBid) currentBid.textContent = formatCurrency(bidAmount);
          if (currentBidder) currentBidder.textContent = bidTeam;
          
          // Update min bid for next bid
          if (minBid) {
            const incrementAmount = calculateBidIncrement(bidAmount);
            const nextMinBid = bidAmount + incrementAmount;
            minBid.textContent = formatCurrency(nextMinBid);
            
            // Update the bid amount input value
            if (bidAmount) {
              bidAmount.min = nextMinBid;
              bidAmount.value = nextMinBid;
            }
          }
          
          // Enable bid button for team members
          if (placeBidBtn && bidAmount) {
            placeBidBtn.disabled = false;
          }
          
          // Update bid history
          if (bidHistory) {
            const bidItem = document.createElement('li');
            bidItem.className = 'list-group-item';
            
            // Highlight if this is current team's bid
            const currentTeamId = teamId ? teamId.value : null;
            if (currentTeamId && bidTeamId == currentTeamId) { // Use loose equality for both string and object IDs
              bidItem.classList.add('highlight');
            }
            
            // Format timestamp
            const timestamp = new Date(bidData.timestamp || Date.now());
            const timeString = timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });
            
            bidItem.innerHTML = `
              <div class="d-flex justify-content-between align-items-center">
                <span><strong>${bidTeam}</strong></span>
                <span class="badge bg-primary">${formatCurrency(bidAmount)}</span>
              </div>
              <small class="text-muted">${timeString}</small>
            `;
            
            // Clear "no bids" message if it exists
            if (bidHistory.children.length === 1 && 
                bidHistory.children[0].textContent.trim() === 'No bids placed yet') {
              bidHistory.innerHTML = '';
            }
            
            // Add to beginning of list
            bidHistory.insertBefore(bidItem, bidHistory.firstChild);
          }
        } catch (error) {
          console.error('Error updating bid info:', error);
        }
      }
      
      // Timer function
      function updateTimer(timeRemaining) {
        // Clear any existing timer
        if (timerInterval) {
          clearInterval(timerInterval);
        }
        
        if (!timeRemaining || timeRemaining <= 0) {
          bidTimer.textContent = "Waiting...";
          timeProgress.style.width = '100%';
          timeProgress.className = 'progress-bar progress-bar-striped progress-bar-animated bg-secondary';
          return;
        }
        
        // Update timer immediately
        bidTimer.textContent = timeRemaining;
        const progressPercent = (timeRemaining / 60) * 100;
        timeProgress.style.width = `${progressPercent}%`;
        
        // Update progress bar color
        if (progressPercent > 60) {
          timeProgress.className = 'progress-bar progress-bar-striped progress-bar-animated bg-success';
        } else if (progressPercent > 30) {
          timeProgress.className = 'progress-bar progress-bar-striped progress-bar-animated bg-warning';
        } else {
          timeProgress.className = 'progress-bar progress-bar-striped progress-bar-animated bg-danger';
        }
        
        // Add warning class when time is running out
        if (timeRemaining <= 10) {
          bidTimer.classList.add('warning');
        } else {
          bidTimer.classList.remove('warning');
        }
      }
      
      // Show notification
      function showNotification(title, message, type = 'info') {
        const toastContainer = document.createElement('div');
        toastContainer.className = 'position-fixed bottom-0 start-50 translate-middle-x p-3';
        toastContainer.style.zIndex = '5';
        
        // Determine background color based on type
        let bgColor = 'bg-info';
        if (type === 'success') bgColor = 'bg-success';
        if (type === 'warning') bgColor = 'bg-warning';
        if (type === 'danger') bgColor = 'bg-danger';
        
        toastContainer.innerHTML = `
          <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header ${bgColor} ${type === 'warning' ? 'text-dark' : 'text-white'}">
              <strong class="me-auto">${title}</strong>
              <button type="button" class="btn-close ${type === 'warning' ? '' : 'btn-close-white'}" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body text-center">
              ${message}
            </div>
          </div>
        `;
        
        document.body.appendChild(toastContainer);
        
        // Remove toast after 5 seconds
        setTimeout(() => {
          toastContainer.remove();
        }, 5000);
      }
      
      // Show bid warning
      function showBidWarning(message) {
        const toastContainer = document.createElement('div');
        toastContainer.className = 'position-fixed top-50 start-50 translate-middle p-3';
        toastContainer.style.zIndex = '5';
        toastContainer.innerHTML = `
          <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header bg-warning text-dark">
              <strong class="me-auto">Auction Ending Soon</strong>
              <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body text-center">
              <i class="fas fa-exclamation-triangle me-2"></i>
              ${message}
            </div>
          </div>
        `;
        
        document.body.appendChild(toastContainer);
        
        // Make the timer flash
        bidTimer.classList.add('warning');
        
        // Remove toast after 7 seconds
        setTimeout(() => {
          toastContainer.remove();
        }, 7000);
      }
      
      // Handle auction status updates
      function handleAuctionStatus(data) {
        // First, reset countdown visibility
        const countdownElem = waitingMessage.querySelector('.countdown-number');
        if (countdownElem) {
          countdownElem.style.display = 'none';
        }
        
        // Update auction status badge based on status field
        const status = data.status || 
                     (data.isRunning && !data.isPaused && !data.isWaiting ? 'running' : 
                      data.isRunning && data.isPaused ? 'paused' : 
                      data.isRunning && data.isWaiting ? 'waiting' : 'not_running');
        
        console.log('Auction status update:', status, data);
        
        // Handle auction ended status specially
        if (status === 'ended') {
          auctionStatusBadge.textContent = 'Auction Ended';
          auctionStatusBadge.className = 'badge bg-secondary';
          
          // Show waiting message with custom text
          waitingMessage.style.display = 'block';
          auctionContainer.style.display = 'none';
          
          // Update waiting message text
          const msgElement = waitingMessage.querySelector('h4');
          if (msgElement) {
            msgElement.textContent = 'Auction has ended';
          }
          
          // Update description
          const descElement = waitingMessage.querySelector('p');
          if (descElement) {
            if (data.summary) {
              descElement.innerHTML = `
                <div class="text-center mb-3">
                  <h5>Auction Summary</h5>
                  <p><strong>Players Sold:</strong> ${data.summary.soldPlayers}</p>
                  <p><strong>Players Unsold:</strong> ${data.summary.unsoldPlayers}</p>
                  <p><strong>Total Amount:</strong> ${formatCurrency(data.summary.totalAmount)}</p>
                </div>
                <div class="alert alert-info">
                  Thank you for participating in the auction. View the results page for complete details.
                </div>
              `;
            } else {
              descElement.textContent = 'The auction has ended. Thank you for participating.';
            }
          }
          
          // Disable bidding controls
          if (placeBidBtn) {
            placeBidBtn.disabled = true;
          }
          
          return;
        }
        
        // Handle each status type appropriately
        if (status === 'running') {
          auctionStatusBadge.textContent = 'Auction Running';
          auctionStatusBadge.className = 'badge bg-success';
          
          // Show auction container and hide waiting message
          waitingMessage.style.display = 'none';
          auctionContainer.style.display = 'flex';
          
          // Update timer
          updateTimer(data.timeRemaining);
          
          // If there's a current player and it's different from what we have
          if (data.currentPlayer && (!currentPlayerData || data.currentPlayer.id !== currentPlayerData.id)) {
            // Load the player details using ID or directly from the data
            if (data.currentPlayer.id) {
              loadPlayerDetails(data.currentPlayer.id);
            } else if (currentPlayerId && currentPlayerId.value) {
              loadPlayerDetails(currentPlayerId.value);
            }
          }
        } else if (status === 'waiting') {
          auctionStatusBadge.textContent = 'Waiting for Next Player';
          auctionStatusBadge.className = 'badge bg-info';
          
          // Show waiting message
          waitingMessage.style.display = 'block';
          auctionContainer.style.display = 'none';
          
          // Show countdown if available
          if (data.timeRemaining !== undefined) {
            showWaitingCountdown(data.timeRemaining);
          }
          
          // If we have a custom message, update the waiting message text
          if (data.message) {
            const msgElement = waitingMessage.querySelector('h4');
            if (msgElement) {
              msgElement.textContent = data.message;
            }
          }
        } else if (status === 'paused') {
          auctionStatusBadge.textContent = 'Auction Paused';
          auctionStatusBadge.className = 'badge bg-warning';
          
          // Update UI based on current state
          if (data.currentPlayer) {
            // If we have a current player, keep showing that player but update UI to show paused state
            waitingMessage.style.display = 'none';
            auctionContainer.style.display = 'flex';
            
            // Update timer display
            bidTimer.textContent = "PAUSED";
            bidTimer.classList.add('warning');
            
            // Stop any timer progress animation
            timeProgress.className = 'progress-bar bg-warning';
            
            // Disable bid button
            if (placeBidBtn) {
              placeBidBtn.disabled = true;
            }
          } else {
            // No current player, show waiting message
            waitingMessage.style.display = 'block';
            auctionContainer.style.display = 'none';
            
            // Update message
            const msgElement = waitingMessage.querySelector('h4');
            if (msgElement) {
              msgElement.textContent = data.message || 'Auction is paused';
            }
            
            const descElement = waitingMessage.querySelector('p');
            if (descElement) {
              descElement.textContent = 'The administrator has paused the auction. Please wait for it to resume.';
            }
          }
        } else {
          // Not running
          auctionStatusBadge.textContent = 'Auction Not Running';
          auctionStatusBadge.className = 'badge bg-secondary';
          
          // Show waiting message
          waitingMessage.style.display = 'block';
          auctionContainer.style.display = 'none';
          
          // Reset player data
          currentPlayerData = null;
          
          // Update message
          const msgElement = waitingMessage.querySelector('h4');
          if (msgElement) {
            msgElement.textContent = data.message || 'Waiting for auction to start...';
          }
          
          const descElement = waitingMessage.querySelector('p');
          if (descElement) {
            descElement.textContent = 'The administrator will start the auction soon. Please wait.';
          }
        }
      }
      
      // Load player details
      function loadPlayerDetails(playerId) {
        if (!playerId) return;
        
        // Update hidden input
        if (currentPlayerId) {
          currentPlayerId.value = playerId;
        }
        
        // Make sure auction container is visible with the correct layout
        waitingMessage.style.display = 'none';
        auctionContainer.style.display = 'flex';
        
        // Show loading state
        playerName.textContent = 'Loading player...';
        playerRole.textContent = '-';
        playerBasePrice.textContent = '-';
        playerRoleBadge.textContent = '';
        currentBid.textContent = 'No bids yet';
        currentBidder.textContent = 'None';
        bidHistory.innerHTML = '<li class="list-group-item text-center">Loading bids...</li>';
        
        // Set default player image
        document.getElementById('player-image').src = '/images/default-player.png';
        
        fetch(`/auction/player/${playerId}`)
          .then(response => {
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            return response.json();
          })
          .then(data => {
            currentPlayerData = data.player;
            
            // Update player details
            playerName.textContent = data.player.name;
            playerRole.textContent = data.player.role;
            playerRoleBadge.textContent = data.player.role;
            playerBasePrice.textContent = formatCurrency(data.player.base_price);
            
            // Update player image if available
            if (data.player.image_url) {
              document.getElementById('player-image').src = data.player.image_url;
            } else {
              // Set role-based default image
              const roleDefaults = {
                'Batsman': '/images/default-batsman.png',
                'Bowler': '/images/default-bowler.png',
                'All-Rounder': '/images/default-all-rounder.png',
                'All-rounder': '/images/default-all-rounder.png',
                'Wicket-Keeper': '/images/default-wicket-keeper.png',
                'Wicket-keeper': '/images/default-wicket-keeper.png'
              };
              const defaultImg = roleDefaults[data.player.role] || '/images/default-player.png';
              document.getElementById('player-image').src = defaultImg;
            }
            
            // Set role badge color based on player role
            const roleColors = {
              'Batsman': 'bg-danger',
              'Bowler': 'bg-success',
              'All-rounder': 'bg-warning',
              'All-Rounder': 'bg-warning',
              'Wicket-keeper': 'bg-info',
              'Wicket-Keeper': 'bg-info'
            };
            
            playerRoleBadge.className = 'badge badge-role ' + 
              (roleColors[data.player.role] || 'bg-secondary');
            
            // Display highest bid if exists
            if (data.highestBid) {
              currentBid.textContent = formatCurrency(data.highestBid.amount);
              currentBidder.textContent = data.highestBid.team_name;
              currentBid.classList.add('text-success');
              
              // Set minimum bid amount to highest bid + increment
              const nextBidAmount = data.highestBid.amount + 10000;
              if (bidAmount) {
                bidAmount.min = nextBidAmount;
                bidAmount.value = nextBidAmount;
                minBid.textContent = formatCurrency(nextBidAmount);
              }
            } else {
              currentBid.textContent = 'No bids yet';
              currentBidder.textContent = 'None';
              currentBid.classList.remove('text-success');
              
              // Set minimum bid amount to base price
              if (bidAmount) {
                bidAmount.min = data.player.base_price;
                bidAmount.value = data.player.base_price;
                minBid.textContent = formatCurrency(data.player.base_price);
              }
            }
            
            // Update bid history
            loadBidHistory(playerId);
            
            // Enable bid button if logged in
            if (placeBidBtn) {
              placeBidBtn.disabled = false;
            }
          })
          .catch(error => {
            console.error('Error fetching player details:', error);
            playerName.textContent = 'Error loading player';
            alert('Error loading player details. Please try again.');
          });
      }
      
      // Load bid history
      function loadBidHistory(playerId) {
        fetch(`/auction/player/${playerId}`)
          .then(response => response.json())
          .then(data => {
            updateBidHistory(data.bids);
          })
          .catch(error => {
            console.error('Error loading bid history:', error);
          });
      }
      
      // Update bid history
      function updateBidHistory(bids) {
        bidHistory.innerHTML = '';
        
        if (bids && bids.length > 0) {
          bids.forEach((bid, index) => {
            const li = document.createElement('li');
            li.className = 'list-group-item bid-history-item';
            
            // Add "highest" badge for the most recent bid
            if (index === 0) {
              li.innerHTML = `
                <div class="d-flex justify-content-between align-items-center">
                  <div>
                    <strong>${bid.team_name}</strong>
                    <div>${formatCurrency(bid.amount)}</div>
                  </div>
                  <span class="badge bg-success">Highest</span>
                </div>
              `;
            } else {
              li.innerHTML = `
                <div>
                  <strong>${bid.team_name}</strong>
                  <div>${formatCurrency(bid.amount)}</div>
                </div>
              `;
            }
            
            bidHistory.appendChild(li);
          });
        } else {
          bidHistory.innerHTML = '<li class="list-group-item text-center">No bids yet</li>';
        }
      }
      
      // Handle bid submission
      if (bidForm) {
        bidForm.addEventListener('submit', function(e) {
          e.preventDefault();
          
          const amount = parseInt(bidAmount.value);
          const playerId = currentPlayerId.value;
          const teamId = document.getElementById('team-id').value;
          
          if (!amount || !playerId || !teamId) {
            alert('Please wait for a player to be on auction and enter a valid bid amount.');
            return;
          }
          
          // Disable button and show loading state
          placeBidBtn.disabled = true;
          placeBidBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...';
          
          // Send bid using bidSocket
          if (bidSocket && bidSocket.connected) {
            console.log('Sending bid via socket:', { player_id: playerId, team_id: teamId, amount: amount });
            bidSocket.emit('place_bid', {
              player_id: playerId,
              team_id: teamId,
              amount: amount
            });
          } else {
            console.error('Bid socket not connected');
            alert('Unable to place bid. Please refresh the page and try again.');
            placeBidBtn.disabled = false;
            placeBidBtn.innerHTML = '<i class="fas fa-gavel me-2"></i>Place Bid';
            return;
          }
        });
      }
      
      // Helper function to update role badge color
      function updateRoleBadgeColor(badge, role) {
        badge.className = 'badge ' + 
          (role.toLowerCase().includes('batsman') ? 'bg-primary' :
           role.toLowerCase().includes('bowler') ? 'bg-success' :
           role.toLowerCase().includes('all-rounder') ? 'bg-warning' :
           role.toLowerCase().includes('wicket-keeper') ? 'bg-info' : 'bg-secondary');
      }
      
      // Helper function to show status message
      function showStatusMessage(message) {
        const statusMessageElem = document.getElementById('status-message');
        if (statusMessageElem) {
          statusMessageElem.textContent = message;
          statusMessageElem.style.display = 'block';
          setTimeout(() => {
            statusMessageElem.style.display = 'none';
          }, 5000);
        }
      }
      
      // Initialize Socket.IO
      initializeSocket();
      
      // Ensure layout is correct on page load
      function ensureCorrectLayout() {
        // If auction container should be visible, make sure it's using flex display
        if (auctionContainer) {
          if (auctionContainer.style.display !== 'none') {
            auctionContainer.style.display = 'flex';
            
            // Also check if bid column is correctly positioned on larger screens
            if (window.innerWidth >= 992) {
              const bidColumn = document.querySelector('.bid-column');
              if (bidColumn) {
                bidColumn.style.width = '350px';
              }
            } else {
              // Reset width on mobile
              const bidColumn = document.querySelector('.bid-column');
              if (bidColumn) {
                bidColumn.style.width = '100%';
              }
            }
          }
        }
      }
      
      // Call initially and add window resize listener
      ensureCorrectLayout();
      window.addEventListener('resize', ensureCorrectLayout);
      
      // Initial auction status check
      fetch('/auction/status')
        .then(response => response.json())
        .then(data => {
          handleAuctionStatus(data);
        })
        .catch(error => {
          console.error('Error fetching auction status:', error);
        });
    });
  </script>
</body>
</html>
